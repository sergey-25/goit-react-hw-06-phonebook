{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducers.js","redux/store.js","components/Container/Container.styled.js","components/Container/Container.js","components/Section/Section.styled.js","components/Section/Section.js","components/ContactForm/ContactsForm.styled.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Contacts/ContactsList.styled.js","components/Contacts/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","App.js","index.js"],"names":["addContact","createAction","deleteContact","getFilterValue","contacts","createReducer","id","name","number","actions","state","payload","some","alert","filter","contact","_","combineReducers","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","phonebook","persistReducer","contactsReducer","devTools","process","persistor","persistStore","StyledWrapper","Container","children","Wrapper","Title","Section","title","Form","Input","Label","Button","getContactsList","getFiltredContactsList","normalizedFilter","toLowerCase","includes","ContactsForm","useState","setName","setNumber","dispatch","useDispatch","useSelector","nameInputId","nanoid","telInputId","handleChange","event","target","value","resetForm","onSubmit","preventDefault","htmlFor","type","placeholder","pattern","onChange","required","Contacts","Item","ContactsList","map","size","color","onClick","Filter","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.ef896143.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = createAction(\"phonebook/add\");\r\nconst deleteContact = createAction(\"phonebook/delete\");\r\nconst getFilterValue = createAction(\"filter/get\");\r\n\r\nexport { addContact, deleteContact, getFilterValue };","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport * as actions from \"./contacts-actions\";\r\n\r\nconst initialState = [\r\n  { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n  { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n  { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n  { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n];\r\n\r\nconst contacts = createReducer(initialState, {\r\n  [actions.addContact]: (state, { payload }) =>\r\n    state.some(({ name }) => name === payload.name)\r\n      ? alert(`Contact ${payload.name} already exists`)\r\n      : [payload, ...state],\r\n\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.getFilterValue]: (_, { payload }) => payload,\r\n});\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n});","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport logger from \"redux-logger\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport contactsReducer from \"./contacts/contacts-reducers\";\r\n\r\nconst persistConfig = {\r\n  key: \"phonebook\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    phonebook: persistReducer(persistConfig, contactsReducer),\r\n  },\r\n  devTools: process.env.NODE_ENV !== \"production\",\r\n  middleware,\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const StyledWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 auto;\r\n  padding: 30px;\r\n  background-color: #ffffff;\r\n  border-radius: 5px;\r\n  \r\n  width: 400px;\r\n`;","import PropTypes from \"prop-types\";\r\nimport { StyledWrapper } from \"./Container.styled\";\r\n\r\nexport const Container = ({ children }) => {\r\n  return <StyledWrapper>{children}</StyledWrapper>;\r\n};\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const Wrapper = styled.section`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding-top: 30px;\r\n  padding-bottom: 30px;\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-bottom: 20px;\r\n  text-transform: uppercase;\r\n  font-size: 28px;\r\n  font-weight: 700;\r\n  color: black;\r\n`;","import PropTypes from \"prop-types\";\r\nimport { Wrapper, Title } from \"./Section.styled\";\r\n\r\nexport const Section = ({ title, children }) => {\r\n  return (\r\n    <Wrapper>\r\n      <Title>{title}</Title>\r\n      {children}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Input = styled.input``;\r\n\r\nexport const Label = styled.label`\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-width: 100px;\r\n  padding: 10px 12px;\r\n  margin-top: 15px;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  color: #fff;\r\n  background-color: #651fff;\r\n  border: 1px solid transparent;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  text-transform: capitalize;\r\n  &:hover,\r\n  &:focus {\r\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\r\n  }\r\n`;","export const getFilterValue = (state) => state.phonebook.filter;\r\n\r\nexport const getContactsList = (state) => state.phonebook.contacts;\r\n\r\nexport const getFiltredContactsList = (state) => {\r\n  const filter = getFilterValue(state);\r\n  const contacts = getContactsList(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(\r\n    ({ name, number }) =>\r\n      name.toLowerCase().includes(normalizedFilter) ||\r\n      number.includes(normalizedFilter)\r\n  );\r\n};","import { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport * as actions from \"../../redux/contacts/contacts-actions\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Form, Input, Label, Button } from \"./ContactsForm.styled\";\r\nimport { getContactsList } from \"../../redux/contacts/contacts-selectors\";\r\n\r\nfunction ContactsForm() {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getContactsList);\r\n\r\n  let nameInputId = nanoid(3);\r\n  let telInputId = nanoid(3);\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (contacts.some((contact) => contact.name === name)) {\r\n      alert(`Contact ${name} already exists`);\r\n\r\n      return;\r\n    }\r\n\r\n    dispatch(actions.addContact({ id: nanoid(3), name, number }));\r\n\r\n    resetForm();\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Label htmlFor={`id-${nameInputId}`}>Name</Label>\r\n      <Input\r\n        id={`id-${nameInputId}`}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        placeholder=\"Name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        value={name}\r\n        onChange={handleChange}\r\n        required\r\n      />\r\n\r\n      <Label htmlFor={`id-${telInputId}`}>Number</Label>\r\n      <Input\r\n        id={`id-${telInputId}`}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        placeholder=\"+38 (XXX) XXX-XX-XX\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        value={number}\r\n        onChange={handleChange}\r\n        required\r\n      />\r\n\r\n      <Button type=\"submit\">Add contact</Button>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default ContactsForm;","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const Contacts = styled.ul`\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width:300px;\r\n  padding: 10px;\r\n  \r\n  overflow: hidden;\r\n  border-radius: 5px;\r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n  & span {\r\n    // display: inline-flex;\r\n    // align-items: center;\r\n    // margin-left: 10px;\r\n    // margin-right: 40px;\r\n  }\r\n  & svg {\r\n    margin-right: 5px;\r\n  }\r\n  & div{\r\n    display:flex;\r\n     flex-direction:column;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-width: 100px;\r\n  padding: 10px;\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  color: #fff;\r\n  background-color: red;\r\n  border: 1px solid transparent;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  text-transform: capitalize;\r\n  &:hover,\r\n  &:focus {\r\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\r\n  }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport * as actions from \"../../redux/contacts/contacts-actions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Contacts, Item, Button } from \"./ContactsList.styled\";\r\nimport { IoPerson } from \"react-icons/io5\";\r\nimport { ImPhone } from \"react-icons/im\";\r\nimport { getFiltredContactsList } from \"../../redux/contacts/contacts-selectors\";\r\n\r\nfunction ContactsList() {\r\n  const contacts = useSelector(getFiltredContactsList);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Contacts>\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <Item key={id}>\r\n            <div>\r\n               <span>\r\n              <IoPerson size={14} color=\"steelblue\" />\r\n              {name}:\r\n            </span>\r\n\r\n            <span>\r\n              <ImPhone size={14} color=\"steelblue\" />\r\n              {number}\r\n            </span>\r\n           </div>\r\n            <Button\r\n              type=\"button\"\r\n              onClick={() => dispatch(actions.deleteContact(id))}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </Item>\r\n        );\r\n      })}\r\n    </Contacts>\r\n  );\r\n}\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\r\n};\r\n\r\nexport default ContactsList;","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const Label = styled.label`\r\n  margin-bottom: 10px;\r\n  font-size: 18px;\r\n  font-weight: 500;\r\n`;\r\n\r\nexport const Input = styled.input``;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Label, Input } from \"./Filter.styled\";\r\nimport * as actions from \"../../redux/contacts/contacts-actions\";\r\nimport { getFilterValue } from \"../../redux/contacts/contacts-selectors\";\r\n\r\nconst Filter = () => {\r\n  const filter = useSelector(getFilterValue);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <Label htmlFor={`id-${nanoid(3)}`}>Find contacts by name</Label>\r\n      <Input\r\n        id={`id-${nanoid(3)}`}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={filter}\r\n        onChange={(event) =>\r\n          dispatch(actions.getFilterValue(event.target.value))\r\n        }\r\n        placeholder=\"Search\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n};\r\n\r\nexport default Filter;","import { Container } from \"./components/Container/Container\";\r\nimport { Section } from \"./components/Section/Section\";\r\nimport ContactsForm from \"./components/ContactForm/ContactForm\";\r\nimport ContactsList from \"./components/Contacts/ContactList\";\r\nimport Filter from \"./components/Filter/Filter\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <Section title=\"Phonebook\">\r\n        <ContactsForm />\r\n      </Section>\r\n\r\n      <Section title=\"Contacts\">\r\n        <Filter />\r\n        <ContactsList />\r\n      </Section>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { store, persistor } from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}